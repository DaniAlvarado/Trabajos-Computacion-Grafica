<!DOCTYPE html>
<html>
  <head>
    <title>Animal</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="js/three.js"></script>
	<script src="js/controls/OrbitControls.js"></script>
	<script src="js/csg.js"></script>
	<script src="js/THREE.CSG.js"></script>
    <script>
		var scene, aspect, camera, renderer, controls;
		var pi= 3.141592654;
		init();
		animate();
		function init(){
			//INICIALIZACIÓN
	        scene = new THREE.Scene();
	        aspect = window.innerWidth / window.innerHeight;
	        camera = new THREE.PerspectiveCamera( 75, aspect, 0.1, 1000);
	        renderer = new THREE.WebGLRenderer();
	        renderer.setSize( window.innerWidth, window.innerHeight );
	        document.body.appendChild( renderer.domElement );
			controls = new THREE.OrbitControls( camera, renderer.domElement );
			
			//ELEMENTOS COMUNES
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3( 0, 0, 0 );
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
		  	var color = new THREE.Color( 0x333333 );
		  	var colorR = new THREE.Color( 0xAA3333 );
		  	var colorG = new THREE.Color( 0x33AA33 );
		  	var colorB = new THREE.Color( 0x333366 );
			
		  	//CREAR LAS GRILLAS PARA EL ESCENARIO
		  	var axesHelper = new THREE.AxesHelper( size );
			scene.add( axesHelper );
			
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color, color );
			scene.add( gridHelperXZ );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );

            //CREAR ILUMINACIÓN
            var ambient = new THREE.AmbientLight( 0xffffff, 2 );
            scene.add( ambient );
			
            var pointLight = new THREE.PointLight( 0xffffff, 1, 100 );
            pointLight.position.set( -5, -2, 5 );
            scene.add( pointLight );
			
            var pointLight = new THREE.PointLight( 0xffffff, .5, 100 );
            pointLight.position.set( 10, -4, -10 );
            scene.add( pointLight );
			
			//CREAR LAS GEOMETRÍAS
			var sphereGeometry = new THREE.SphereGeometry( 1, 32, 32 );
			var cylinder2Geometry = new THREE.SphereGeometry( 1.0,1.0,1.5,32 );
			var sphereGeometry2 = new THREE.SphereGeometry( 0.8, 32, 32 );
			var cylinderGeometry= new THREE.CylinderGeometry( .4, .4, 1, 32 );
			var cylinderGeometry1= new THREE.CylinderGeometry( .4, .4,1.5, 32 );	
			var cylinderGeometry2= new THREE.CylinderGeometry( .3, .3, 1, 32 );
			var cylinderGeometry3= new THREE.CylinderGeometry( .3, .3, 1, 32 );	
			
			//CREAR LOS MATERIALES
            var material1 = new THREE.MeshStandardMaterial( { color: colorR, metalness: 0.5, roughness: 0.1  } );
			var material2 = new THREE.MeshStandardMaterial( { color: colorG, metalness: 0.8, roughness: 0.2  } );
			var material3 = new THREE.MeshStandardMaterial({ color : colorB, metalness: 0.5, roughness: 0.1});
			var material4 = new THREE.MeshStandardMaterial({ color : colorG, metalness: 0.5, roughness: 0.1});
			
			//CREAR LAS MALLAS
		
			var sphere = new THREE.Mesh( sphereGeometry );
			var sphere2 = new THREE.Mesh( sphereGeometry2 );
			var cilin2= new THREE.Mesh( cylinder2Geometry);
			var cilindro= new THREE.Mesh( cylinderGeometry);
			var cilindro1= new THREE.Mesh(cylinderGeometry1);
			var cilindro2= new THREE.Mesh(cylinderGeometry2);
			var cilindro3= new THREE.Mesh(cylinderGeometry3);
		//	cilindro1.rotateZ( pi/4 );
			cilindro.position.z=0.6;
            cilindro1.rotateX( pi/2 );
			cilindro1.rotateY( -pi/2 );
			cilindro1.position.y=0.5;
			cilindro1.position.z=0.2;
			cilindro2.position.z=-0.2;
			
		
			//CONVERTIR A CSG
			var sphereCSG = THREE.CSG.fromMesh( sphere );
			var cilindroCSG = THREE.CSG.fromMesh( cilindro );
			var sphere2CSG = THREE.CSG.fromMesh( sphere2 );
			var cilin2CSG = THREE.CSG.fromMesh( cilin2 );
			var cilindro1CSG = THREE.CSG.fromMesh( cilindro1 );
			var cilindro2CSG = THREE.CSG.fromMesh( cilindro2 );

			//APLICAR LAS OPERACIONES
			var result= sphere2CSG.intersect(cilin2CSG);
            var result1 = cilindro1CSG.union(cilindro2CSG );//union cilindros
			var result2 = cilindro1CSG.union(cilindroCSG );//union cilindros	
			//CONVERTIR A MALLA DE THREE JS NUEVAMENTE
			
            var C2T1 = THREE.CSG.toMesh( result1 );
			var C2T2 = THREE.CSG.toMesh( result2 );

			
			C2T1.material= material3;
			C2T2.material = material3;

            var  C2t1CSG= THREE.CSG.fromMesh(C2T1);
			var C2t2CSG = THREE.CSG.fromMesh( C2T2);

			
			//convertir a csg
			var result3= C2t2CSG.intersect(sphereCSG);
			var result4= C2t2CSG.intersect(sphereCSG);
			var result5= C2t1CSG.intersect(sphereCSG);
			var result6= C2t1CSG.intersect(sphereCSG);
			var result7= cilin2CSG.intersect(sphere2CSG);

			var C2T3 = THREE.CSG.toMesh( result3 );
			var C2T4 = THREE.CSG.toMesh( result4 );
			var C2T5 = THREE.CSG.toMesh( result5 );
			var C2T6 = THREE.CSG.toMesh( result6 );
            var C2C1= THREE.CSG.toMesh(result7);
			C2T3.material = material4;
			C2T4.material = material4;
			C2T5.material = material4;
			C2T6.material = material4;
			C2C1.material= material4;
			var C2t3CSG= THREE.CSG.fromMesh( C2T3);
			var C2t4CSG= THREE.CSG.fromMesh( C2T4);
			
			C2C1.translateX(2.5);
			C2C1.translateY(1);
			C2T5.material = material4;
			C2T6.material = material4;
			C2T2.translateX(3);
			C2T3.translateX(1.5);
			C2T3.translateZ(1);
			C2T3.rotateZ(pi/4);
			
			C2T4.translateX(-1.5);
			C2T4.translateZ(1);
			C2T4.rotateZ(-pi/4);
			
			C2T5.translateX(1.5);
			C2T5.translateZ(-1);
			C2T5.rotateZ(pi/4);
			
			C2T6.translateX(-1.5);
			C2T6.translateZ(-1);
			C2T6.rotateZ(-pi/4);
			
			C2T5.material= material4;
			C2T6.material = material4;
			
			//AGREGAR A LA ESCENA LOS DIFERENTES ELEMENTOS

			sphere.material = material2;
			cilindro.material = material3;
			cilindro1.material = material3;
			cilindro2.material = material3;
			cilin2.material = material3;
			//AGREGAR A LA ESCENA LOS DIFERENTES ELEMENTOS
            
			//scene.add( C2T2);
			//scene.add(C2C1);
			scene.add( C2T3);
	        scene.add( C2T4);
			scene.add( C2T5);
			scene.add( C2T6);	
			//scene.add(sphere2);
		    scene.add(cilin2);
			//scene.add( sphere );
			camera.position.x = 2;
			camera.position.y = 2;
		  	camera.position.z = 5;
			camera.lookAt( origin );
			cilindro.position.y=0.5 ;
		}
		function animate(){
			requestAnimationFrame( animate );
			controls.update();
			render();
		}
		function render(){
			renderer.render( scene, camera );
		}
    </script>
  </body>
</html>
